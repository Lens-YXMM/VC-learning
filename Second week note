Date：2016-07-04 14:00 Dormitory
    《VC++ 深入详解（修订版）》 孙鑫
    
    note 1: 窗口类 
    窗口的特征由WINDCLASS结构体定义
    typedef struct _WNDCLASS {
        UINT        style;
        WNDPROC     lpfnWndProc;      //函数指针
        int         cbClsExtra;       //类附加内存，用于存储类的附加信息，一般设置为0
        int         cbWndExtra;       //窗口附加内存，用于存储窗口特有的数据，一般设置为0。用此结构注册对话框时必须设置该成员
        HANDLE      hInstance;        //指定包含窗口过程的程序的实例句柄
        HICON       hIcon;            
        HCURSOR     hCursor;
        HBRUSH      hbrBackground;
        LPCTSTR     lpszMenuName;
        LPCTSTR     lpszClassName;
    } WNDCLASS;
    
    note 1.1:
        在Windows.h中，以CS_开头的类样式（Class Style）标识符被定义为16位的常量，这些常量都只有某一位为1。（style参数值参见MSDN）
        对这样的位标识符可以采用位运算来实现复合功能，如位或（|）将CS_HREDRAW和CS_VREDRAW组合，可以使窗口在水平和垂直尺寸发生变化
    时发生重绘等。
    note 1.2:
        lpfnWndProc指向窗口过程函数，该函数时一个回调函数。回调函数不是由该函数的实现放直接调用，而是在特定的事件或条件发生时由另
    外一方条用的，用于对该时间或条件进行响应。
    note 1.3:
        __stdcall 与 __cdecl 两种不同的函数调用约定的区别
        __stdcall 调用约定用于调用 Win32 API 函数。被调用方将清理堆栈，以便让编译器生成 vararg 函数 __cdecl。使用此调用约定的函数
    需要一个函数原型。
        __cdecl 是 C 和 C++ 程序的默认调用约定。由于堆栈已由调用方清理，因此它可以执行 vararg 函数。 __cdecl 调用约定创建的可执行
    文件大于 __stdcall 调用约定创建的可执行文件，这是因为它要求每个函数调用包括堆栈清理代码。以下列表显示此调用约定的实现。
    参见：https://msdn.microsoft.com/zh-cn/library/zkwh89ks.aspx
        在VC++开发环境中，默认的编译选项是__cdecl，对于那些需要__stdcall调用约定的函数，在声明时必须显式地加上__stdcall。
    note 1.4:
        在为hIcon变量赋值时，可以调用LoadIcon函数来加载一个图标资源，发挥系统分配给该图标的句柄。如果加载的是系统的标准图标，该函
    数第一个参数必须为NULL。当需要将图标ID（整数）转换成需要的LPCTSTR类型是，可以使用MAKEINTRESOURCE宏。
        函数LoadCursor与LoadIcon用法类似
    note 1.5：
        可以调用GetStockObject 函数来得到系统的标准画刷。 HGDIOBJ GetStockObject (int fnObject);
        该函数不仅可以用于获取画刷的句柄，还可以用于获取画笔、字体和调色板的句柄，由于该函数可以返回多种资源对象的句柄，在实际调
    用该函数钱无法确定它返回哪一种资源对象的句柄，因此它的返回值的类型定义为HGDIOBJ，在实际使用时，需要进行类型转化。
    
    note 2：注册窗口类
        ATOM RegisterClass(CONST WNDCLASS *lpWndClass);
        →word unsigned short

Date：2016-07-05 15:00 Dormitory        
    note 3： 创建窗口
    HWND CreateWindow(
        LPCTSTR   lpClassName,        // pointer to registered class name
        LPCTSTR   lpWindowName,       // pointer to window name
        DWORD     dwStyle,            // window style
        int       x,                  // horizontal position of window
        int       y,                  // vertical position of window
        int       nWidth,             // window width
        int       nHeight,            // window height
        HWND      hWndParent,         // handle to parent or owner window
        HMENU     hMenu,              // handle to menu or child-window identifier
        HANDLE    hInstance,          // handle to application instance
        LPVOID    lpParam             // pointer to window-creation data
    );
    note 3.1：    
        dwStyle 与 style 前者指定某个具体的窗口的样式，后者是指定窗口类的样式，基于该窗口类创建的窗口都具有这些样式。
        类型：WS_*********WINDOW
        参见：https://technet.microsoft.com/zh-cn/subscriptions/aa931018
    note 3.2：
        x，y 与 nWidth，nHeight 前一个参数被设为CW_USEDEFAULT时，系统为窗口选择默认的左上角坐标（宽度和高度），而忽略第二个参数。
    note 3.3:
        对父窗口的操作对子窗口的影响
        父窗口      子窗口
        销毁        在父窗口被销毁之前销毁
        隐藏        在父窗口被隐藏之前隐藏，子窗口只有在父窗口可见时可见
        移动        跟随父窗口客户区一起移动
        显示        在父窗口显示之后显示
    note 3.4：
        lpParam WM_CREATE消息的附加参数lParam传入的数据指针。在创建多文档界面的客户窗口时，lpParam必须指向CLIENTCREATESTRUCT结构
    体。多数窗口将这个窗口设置为NULL。
    note 3.5：
        窗口创建成功，该函数返回系统为该窗口分配的句柄，否则，返回NULL。
        注意：在创建窗口之前应先定义一个窗口句柄变量来接受创建窗口之后返回的句柄值。
    
    note 4：显示及更新窗口
        note 4.1：
        显示窗口
        BOOL ShowWindow(
            HWND  hWnd,     // handle to window
            int   nCmdShow  // show state
        );
        nCmdShow 值参见：https://technet.microsoft.com/zh-cn/office/aa250350
        note 4.2：
        更新窗口
        BOOL UpdateWindow(
            HWND hWnd   //handle to window
        );
        参数hWnd指的是创建成功后的窗口的句柄。该函数通过发送一个WM_PAINT消息来刷新窗口，UpdateWindow将WM_PAINT消息直接发送给了窗
    口过程函数进行处理，而没有放到我们前面所说的消息队列里！
        
    note 5：
        创建窗口流程：设计 → 注册 → 创建 → 显示及更新 → 完成
    
    note 6：消息循环
    获取消息函数
    BOOL GetMessage(
        LPMSG lpMSG,            // adress of structure with message
        HWND  hWnd,             // handle of window
        UINT  wMsgFilterMin,    // first message
        UINT  wMsgFilterMax     // last message
    );
    note 6.1：
        hWnd 指定接收属于哪一个窗口的消息，通常将其设置为NULL，用于接收属于调用线程的所有窗口的窗口消息。
    note 6.2：
        wMsgFilterMin 指定要获取的消息的最小值，通常为0；wMsgFilterMax指定要获取的消息的最大值。如果这两个值都为0则接收所有消息。
    note 6.3：
        该函数接收到除WM_QUIT外的消息均返回非零值。对于WM_QUIT消息，该函数返回0，如果出现了错误，该函数返回-1.例如，当参数hWnd是
    无效的窗口句柄或lpMsg是无效的指针时。
    
Date：2016-07-06 14:40 Dormitory
    note 6.4:
        消息循环代码举例
    MSG msg;
    while(GetMessage(&msg,NULL,0,0)
    {
        TranslateMessage(&msg);     // 用于将虚拟键消息转换为字符消息
        DispathchMessage(&msg);     // 分派一个消息到窗口过程
    }
    字符消息被投递到调用线程的消息队列中，当下一次调用GetMessage函数时被取出。当我们敲击键盘上的某个字符键时，系统将产生 WM_KEY
DOWN和 WM_KEYUP 消息。这两个消息的附加参数(wParam 和 lParam)包含的是虚拟键代码和扫描吗等信息，而我们在程序中往往需要得到某个字符
的ASCII码，TranslateMessage 这个函数就可以将WM_KEYDOWN 和 WM_KEYUP消息的组合转换为一条WM_CHAR消息(该消息的wParam附加参数包含了字
符的ASCII码)，并将转换后的心消息投递到调用线程的消息队列中。注意：TranslateMessage函数并不会修改原有的消息，它只是产生新的消息并
投递到消息队列中。
    note 6.5：
    获取消息的另一种方式
    BOOL PeekMessage(
            LPMSG lpMsg,            // message information
            HWND  hWnd,             // handle to window
            UINT  wMsgFilterMin,    // first message
            UINT  wMsgFilterMax,    // last message
            UINT  wRemoveMsg        // removal options
    );
    removal options: PM_NOREMOVE not remove message after processing; PM_REMOVE remove message after processing
    see more in: https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms644943(d=printer,v=vs.85).aspx
    note 6.6：
    发送消息
    SendMessage 和 PostMessage 函数。前者直接将消息发送给窗口，并调用该窗口的窗口过程进行处理。在窗口过程对消息处理完毕后，该函
数才返回（该函数发送的消息为不进队消息）；后者将消息放入与创建窗口的线程相关联的消息队列后立即返回。
    此外除这两个函数外，还有一个PostThreadMessage函数，用于向线程发送消息，对于线程消息，MSG结构体中的hwnd成员为NULL。
    note 7: Window应用程序的消息处理机制
                                                            2 GetMessage(…)
                                                应用程序     ←――――――――――┐    
                                                   │                    │ 
                            窗口过程     3 Dispatch│Message(…)       消息队列
                                ↑    4             ↓                1   ↑
                                └―――――――――――    操作系统     ―――――――――――┘        
    (1) 操作系统接收到应用程序的窗口消息，将消息投递到该应用程序的消息队列中。
    (2) 应用程序在消息循环中调用GetMessage函数从消息队列中取出一条一条的消息，取出消息后，应用程序可以对消息进行一些预处理，例如
    ，放弃对某些消息的响应，或者调用TranslateMessage产生新的消息。
    (3) 应用程序调用DispatchMessage，将消息回传给操作系统。消息是由MSG结构体对象来表示的，其中就包含了接受消息的窗口的句柄。因此
    ，DispatchMessage总能进行正确的传递。
    (4)系统利用WNDCLASS结构体的lpfnWndProc成员保存的窗口过程函数的指针调用窗口过程，对消息进行处理（即“系统给应用程序发送了消息”）。
    
    note 8：窗口过程函数
    LRESULT CALLBACK WindowProc(
            HWND   hwnd,        // handle to window
            UINT   uMsg,        // message identifier
            WPARAM wParam,      // first message parameter  
            LPARAM lParam       // second message parameter
    );
        后两个参数为消息代码的两个附加参数
        
