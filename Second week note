Date：2016-07-04 14:00 Dormitory
    《VC++ 深入详解（修订版）》 孙鑫
    
    note 1: 窗口类 
    窗口的特征由WINDCLASS结构体定义
    typedef struct _WNDCLASS {
        UINT        style;
        WNDPROC     lpfnWndProc;      //函数指针
        int         cbClsExtra;       //类附加内存，用于存储类的附加信息，一般设置为0
        int         cbWndExtra;       //窗口附加内存，用于存储窗口特有的数据，一般设置为0。用此结构注册对话框时必须设置该成员
        HANDLE      hInstance;        //指定包含窗口过程的程序的实例句柄
        HICON       hIcon;            
        HCURSOR     hCursor;
        HBRUSH      hbrBackground;
        LPCTSTR     lpszMenuName;
        LPCTSTR     lpszClassName;
    } WNDCLASS;
    
    note 1.1:
        在Windows.h中，以CS_开头的类样式（Class Style）标识符被定义为16位的常量，这些常量都只有某一位为1。（style参数值参见MSDN）
        对这样的位标识符可以采用位运算来实现复合功能，如位或（|）将CS_HREDRAW和CS_VREDRAW组合，可以使窗口在水平和垂直尺寸发生变化
    时发生重绘等。
    note 1.2:
        lpfnWndProc指向窗口过程函数，该函数时一个回调函数。回调函数不是由该函数的实现放直接调用，而是在特定的事件或条件发生时由另
    外一方条用的，用于对该时间或条件进行响应。
    note 1.3:
        __stdcall 与 __cdecl 两种不同的函数调用约定的区别
        __stdcall 调用约定用于调用 Win32 API 函数。被调用方将清理堆栈，以便让编译器生成 vararg 函数 __cdecl。使用此调用约定的函数
    需要一个函数原型。
        __cdecl 是 C 和 C++ 程序的默认调用约定。由于堆栈已由调用方清理，因此它可以执行 vararg 函数。 __cdecl 调用约定创建的可执行
    文件大于 __stdcall 调用约定创建的可执行文件，这是因为它要求每个函数调用包括堆栈清理代码。以下列表显示此调用约定的实现。
    参见：https://msdn.microsoft.com/zh-cn/library/zkwh89ks.aspx
        在VC++开发环境中，默认的编译选项是__cdecl，对于那些需要__stdcall调用约定的函数，在声明时必须显式地加上__stdcall。
    note 1.4:
        在为hIcon变量赋值时，可以调用LoadIcon函数来加载一个图标资源，发挥系统分配给该图标的句柄。如果加载的是系统的标准图标，该函
    数第一个参数必须为NULL。当需要将图标ID（整数）转换成需要的LPCTSTR类型是，可以使用MAKEINTRESOURCE宏。
        函数LoadCursor与LoadIcon用法类似
    note 1.5：
        可以调用GetStockObject 函数来得到系统的标准画刷。 HGDIOBJ GetStockObject (int fnObject);
        该函数不仅可以用于获取画刷的句柄，还可以用于获取画笔、字体和调色板的句柄，由于该函数可以返回多种资源对象的句柄，在实际调
    用该函数钱无法确定它返回哪一种资源对象的句柄，因此它的返回值的类型定义为HGDIOBJ，在实际使用时，需要进行类型转化。
    
    note 2：注册窗口类
        ATOM RegisterClass(CONST WNDCLASS *lpWndClass);
        →word unsigned short
        
